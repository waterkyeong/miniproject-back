package pnu.edu.service;

import java.io.File;
import java.io.IOException;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import lombok.RequiredArgsConstructor;
import pnu.edu.domain.FreeBoard;
import pnu.edu.domain.FreeBoardImgs;
import pnu.edu.repository.FreeBoardImgsRepository;
import pnu.edu.repository.FreeBoardRepository;
import pnu.edu.util.Fileutil;

@Service
@RequiredArgsConstructor
public class FreeBoardService {
	
	private final FreeBoardRepository freebRepo;
	private final FreeBoardImgsRepository freebImgRepo;
	
	@Value("${spring.servlet.multipart.location}")
	private static String location;
	
	public Page<FreeBoard> getFreeBoard(int page, int size) {
		Pageable pageable = PageRequest.of(page, size);
		
		return freebRepo.findAll(pageable);
	}
	
	public FreeBoard getFreeBoard(int freeboardid) {
		countView(freeboardid);
		return freebRepo.findById(freeboardid).get();
	}
	
	public FreeBoard countView(int freeboardid) {
		FreeBoard findf = freebRepo.findById(freeboardid).get();
		findf.setView(findf.getView()+1);
		return freebRepo.save(findf);
	}
	
	public FreeBoard insertFreeBoard(FreeBoard freeBoard, MultipartFile[] files) throws IllegalStateException, IOException {
		//파일저장
		Fileutil.uploadImg(files);
		
		//게시판 DB저장
		FreeBoard freeBoard1 = FreeBoard.builder()
				.privateType(freeBoard.getPrivateType())
				.type(freeBoard.getType())
				.title(freeBoard.getTitle())
				.content(freeBoard.getContent())
				.member(freeBoard.getMember()).build();
		FreeBoard freeBoard2 = freebRepo.save(freeBoard1);

		//이미지 정보저장(객체만들어서)
		for(MultipartFile file : files) {			
			FreeBoardImgs img = FreeBoardImgs.builder()
					.fimgoriname(location + file.getOriginalFilename())
					.fimgname(file.getName())
					.freeboard(freeBoard2)
					.build();
			freebImgRepo.save(img);
		}
		
		return freeBoard2;
	}

	
	public FreeBoard updateFreeBoard(FreeBoard freeBoard, MultipartFile[] files) {
		
		freebImgRepo.deleteAllById(freeBoard.getFimges());
		
		//파일저장
		Fileutil.uploadImg(files);
		
		FreeBoard findf = freebRepo.findById(freeBoard.getFreeBoardId()).get();
		findf.setPrivateType(freeBoard.getPrivateType());
		findf.setType(freeBoard.getType());
		findf.setTitle(freeBoard.getTitle());
		findf.setContent(freeBoard.getContent());
		findf.setCreateDate(freeBoard.getCreateDate());
		FreeBoard findf1 =  freebRepo.save(findf);
		
		//이미지 정보저장(객체만들어서)
		for(MultipartFile file : files) {
			FreeBoardImgs img = FreeBoardImgs.builder()
					.fimgoriname(location + file.getOriginalFilename())
					.fimgname(file.getName())
					.freeboard(findf1)
					.build();
			freebImgRepo.save(img);
		}
		
		return findf1;
	}
	
	public FreeBoard deleteFreeBoard(int freeboardid) {
		FreeBoard findf = freebRepo.findById(freeboardid).get();
		freebRepo.delete(findf);
		return findf;
	}
}
